name: Build and Deploy Cloud Cost Optimizer

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: PrimusAllCluster
  BACKEND_ECR_REPOSITORY: cloud-cost-optimizer-backend
  FRONTEND_ECR_REPOSITORY: cloud-cost-optimizer-frontend

jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.backend
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.BACKEND_ECR_REPOSITORY }}:${{ github.sha }},${{ steps.login-ecr.outputs.registry }}/${{ env.BACKEND_ECR_REPOSITORY }}:latest
        
    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./src/ui/dashboard
        file: ./src/ui/dashboard/Dockerfile.frontend
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.FRONTEND_ECR_REPOSITORY }}:${{ github.sha }},${{ steps.login-ecr.outputs.registry }}/${{ env.FRONTEND_ECR_REPOSITORY }}:latest
        
    - name: Set outputs for next job
      id: set-outputs
      run: |
        echo "backend_image=${{ steps.login-ecr.outputs.registry }}/${{ env.BACKEND_ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "frontend_image=${{ steps.login-ecr.outputs.registry }}/${{ env.FRONTEND_ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT
        
    outputs:
      backend_image: ${{ steps.set-outputs.outputs.backend_image }}
      frontend_image: ${{ steps.set-outputs.outputs.frontend_image }}
      
  deploy:
    name: Deploy to EKS
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
      
    - name: Install kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/
        
    - name: Update kustomization with image tags
      run: |
        cd k8s-manifests/overlays/production
        
        # Update image references
        sed -i 's|your-registry/cloud-cost-optimizer-backend:latest|${{ needs.build-and-push.outputs.backend_image }}|g' kustomization.yaml
        sed -i 's|your-registry/cloud-cost-optimizer-frontend:latest|${{ needs.build-and-push.outputs.frontend_image }}|g' kustomization.yaml
        
        # Update IAM role ARN
        sed -i 's|eks.amazonaws.com/role-arn: .*|eks.amazonaws.com/role-arn: ${{ secrets.COST_OPTIMIZER_ROLE_ARN }}|g' ../../base/service-account.yaml
        
    - name: Deploy to EKS
      run: |
        cd k8s-manifests/overlays/production
        kubectl apply -k .
        
    - name: Verify deployment
      run: |
        kubectl get pods -n cloud-cost-optimizer
        kubectl get svc -n cloud-cost-optimizer
        
    - name: Get LoadBalancer URL
      run: |
        echo "Waiting for LoadBalancer to be ready..."
        kubectl wait --for=condition=available --timeout=300s deployment/cloud-cost-optimizer-frontend -n cloud-cost-optimizer
        
        echo "Application URL:"
        kubectl get svc cloud-cost-optimizer-frontend -n cloud-cost-optimizer -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
